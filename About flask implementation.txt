FLASK 

* Flask is a web framework that provides libraries to build lightweight web applications in python. 
* It is developed by "Armin Ronacher" who leads an international group of python enthusiasts (POCCO).
* It is based on WSGI toolkit and jinja2 template engine.  
* Flask is considered as a micro framework.

WSGI :-
  It is an acronym for web server gateway interface which is a standard for python web application development. 
  It is considered as the specification for the universal interface between the web server and web application.
   
  
 Jinga2 :-
 Jinja2 is a web template engine which combines a template with a certain data source to render the dynamic web pages.
 
 
 * To install flask on the system, we need to have python 2.7 or higher installed on our system. 
  >>>Install virtual environment (virtualenv) :-
 
   -> virtualenv is considered as the virtual python environment builder which is used to create the multiple python virtual environment side by side. 
       It can be installed by using the following command.

       >>> pip install virtualenv  
       
    -> Once it is installed, we can create the new virtual environment into a folder as given below.

        mkdir new   
        cd new   
        virtualenv venv  
        
   ->   To activate the corresponding environment, use the following command
        venv\scripts\activate  
        
   ->  We can now install the flask by using the following command.
        pip install flask  
   
First Flask application :-

To create the first flask application we need to Write the following lines of code and save to a file named as script.py

          from flask import Flask  

          app = Flask(__name__) #creating the Flask class object   

          @app.route('/') #decorator drfines the   
          def home():  
              return "hello, this is our first flask website";  

          if __name__ =='__main__':  
              app.run(debug = True) 
   
* To build the python web application, we need to import the Flask module. An object of the Flask class is considered as the WSGI application.

* We need to pass the name of the current module, i.e. __name__ as the argument into the Flask constructor.

* The route() function of the Flask class defines the URL mapping of the associated function. The syntax is given below.

        app.route(rule, options)  

* It accepts the following parameters.

-----> rule :    It represents the URL binding with the function.
-----> options :  It represents the list of parameters to be associated with the rule object

As we can see here, the / URL is bound to the main function which is responsible for returning the server response. 
It can return a string to be printed on the browser's window or we can use the HTML template to return the HTML file as a response from the server.

Finally, the run method of the Flask class is used to run the flask application on the local development server.

The syntax is given below.

app.run(host, port, debug, options)   



host :-	The default hostname is 127.0.0.1, i.e. localhost.
port	:- The port number to which the server is listening to. The default port number is 5000.
debug	:- The default is false. It provides debug information if it is set to true.
options	:-It contains the information to be forwarded to the server.

Flask App routing :-

* App routing is used to map the specific URL with the associated function that is intended to perform some task. 
* It is used to access some particular page like Flask Tutorial in the web application.
* In our first application, the URL ('/') is associated with the home function that returns a particular string displayed on the web page.
* In other words, we can say that if we visit the particular URL mapped to some particular function, the output of that function is rendered on the browser's screen.

The following converters are used to convert the default string type to the associated data type.

string: default
int: used to convert the string to the integer
float: used to convert the string to the float.
path: It can accept the slashes given in the URL.

The add_url_rule() function:- 

-->There is one more approach to perform routing for the flask web application that can be done by using the add_url() function of the Flask class. 
   The syntax to use this function is given below.

    add_url_rule(<url rule>, <endpoint>, <view function>)  
    
FLASK URL BUILDING :-

* The url_for() function is used to build a URL to the specific function dynamically. 
* The first argument is the name of the specified function, and then we can pass any number of keyword argument corresponding to the variable part of the URL.
* This function is useful in the sense that we can avoid hard-coding the URLs into the templates by dynamically building them using this function.

Benefits of the Dynamic URL Building :- 

It avoids hard coding of the URLs.
We can change the URLs dynamically instead of remembering the manually changed hard-coded URLs.
URL building handles the escaping of special characters and Unicode data transparently.
The generated paths are always absolute, avoiding unexpected behavior of relative paths in browsers.
If your application is placed outside the URL root, for example, in /myapplication instead of /, url_for() properly handles that for you.
  
 
 
 THATS ABOUT THE FLASK. These are the learnings that i learnt and summarized as a part of first assignment regardings flask frame work.
 
 
 
                                                  *** THE END ***
 
 
